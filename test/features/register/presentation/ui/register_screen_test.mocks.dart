// Mocks generated by Mockito 5.3.2 from annotations
// in youtube_sample_app/test/features/register/presentation/ui/register_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:multiple_result/multiple_result.dart' as _i2;
import 'package:youtube_sample_app/core/error/failure.dart' as _i5;
import 'package:youtube_sample_app/core/provider/is_internet_connected_provider.dart'
    as _i7;
import 'package:youtube_sample_app/features/register/application/register_service.dart'
    as _i4;
import 'package:youtube_sample_app/features/register/data/dto/request/register_request.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<E, S> extends _i1.SmartFake implements _i2.Result<E, S> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_1<T> extends _i1.SmartFake
    implements _i3.StreamController<T> {
  _FakeStreamController_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RegisterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterService extends _i1.Mock implements _i4.RegisterService {
  @override
  _i3.Future<_i2.Result<_i5.Failure, bool>> register(
          _i6.RegisterRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [request],
        ),
        returnValue: _i3.Future<_i2.Result<_i5.Failure, bool>>.value(
            _FakeResult_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #register,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.Result<_i5.Failure, bool>>.value(
                _FakeResult_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #register,
            [request],
          ),
        )),
      ) as _i3.Future<_i2.Result<_i5.Failure, bool>>);
  @override
  _i3.Future<bool> addToBox<T>(
    String? key,
    T? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToBox,
          [
            key,
            value,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [InternetConnectionObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionObserver extends _i1.Mock
    implements _i7.InternetConnectionObserver {
  @override
  _i3.StreamController<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _FakeStreamController_1<bool>(
          this,
          Invocation.getter(#hasConnection),
        ),
        returnValueForMissingStub: _FakeStreamController_1<bool>(
          this,
          Invocation.getter(#hasConnection),
        ),
      ) as _i3.StreamController<bool>);
  @override
  set hasConnection(_i3.StreamController<bool>? _hasConnection) =>
      super.noSuchMethod(
        Invocation.setter(
          #hasConnection,
          _hasConnection,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<bool> isNetConnected() => (super.noSuchMethod(
        Invocation.method(
          #isNetConnected,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
