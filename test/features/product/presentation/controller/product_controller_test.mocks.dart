// Mocks generated by Mockito 5.3.2 from annotations
// in youtube_sample_app/test/features/product/presentation/controller/product_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:multiple_result/multiple_result.dart' as _i2;
import 'package:youtube_sample_app/core/error/failure.dart' as _i6;
import 'package:youtube_sample_app/features/product/application/product_service.dart'
    as _i4;
import 'package:youtube_sample_app/features/product/data/dto/response/product_response.dart'
    as _i7;
import 'package:youtube_sample_app/features/product/domain/model/product_model.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<E, S> extends _i1.SmartFake implements _i2.Result<E, S> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductModel_1 extends _i1.SmartFake implements _i3.ProductModel {
  _FakeProductModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductService extends _i1.Mock implements _i4.ProductService {
  @override
  _i5.Future<_i2.Result<_i6.Failure, _i3.ProductModel>> getProducts(
          Map<String, dynamic>? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [query],
        ),
        returnValue:
            _i5.Future<_i2.Result<_i6.Failure, _i3.ProductModel>>.value(
                _FakeResult_0<_i6.Failure, _i3.ProductModel>(
          this,
          Invocation.method(
            #getProducts,
            [query],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Result<_i6.Failure, _i3.ProductModel>>.value(
                _FakeResult_0<_i6.Failure, _i3.ProductModel>(
          this,
          Invocation.method(
            #getProducts,
            [query],
          ),
        )),
      ) as _i5.Future<_i2.Result<_i6.Failure, _i3.ProductModel>>);
  @override
  _i3.ProductModel mapToProductModel(_i7.ProductResponse? response) =>
      (super.noSuchMethod(
        Invocation.method(
          #mapToProductModel,
          [response],
        ),
        returnValue: _FakeProductModel_1(
          this,
          Invocation.method(
            #mapToProductModel,
            [response],
          ),
        ),
        returnValueForMissingStub: _FakeProductModel_1(
          this,
          Invocation.method(
            #mapToProductModel,
            [response],
          ),
        ),
      ) as _i3.ProductModel);
  @override
  _i5.Future<_i2.Result<Failure, S>> call<Failure, S>(
          _i5.Future<_i2.Result<Failure, S>> Function()? call) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [call],
        ),
        returnValue:
            _i5.Future<_i2.Result<Failure, S>>.value(_FakeResult_0<Failure, S>(
          this,
          Invocation.method(
            #call,
            [call],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Result<Failure, S>>.value(_FakeResult_0<Failure, S>(
          this,
          Invocation.method(
            #call,
            [call],
          ),
        )),
      ) as _i5.Future<_i2.Result<Failure, S>>);
}
